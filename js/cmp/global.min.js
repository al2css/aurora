$(document).ready(function() {
    WeightAndBalance.init();
});

var WeightAndBalance = {
    init: function() {
        console.log("##### INIT #####");
    }
}, WeightBalanceApp = angular.module("WeightBalanceApp", [ "ngRoute", "ngTouch", "ngSanitize", "ui.bootstrap", "LocalStorageModule" ]);

WeightBalanceApp.config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/login", {
        controller: "LoginCtrl",
        templateUrl: "app/partials/_login.html",
        controllerAs: "login"
    }).when("/reset-password", {
        controller: "ResetPassCtrl",
        templateUrl: "app/partials/_reset-password.html",
        controllerAs: "resetPass"
    }).when("/my-flights", {
        controller: "FlightsCtrl",
        templateUrl: "app/partials/_my-flights.html",
        controllerAs: "myFlights"
    }).when("/available-flights", {
        controller: "FlightsCtrl",
        templateUrl: "app/partials/_available-flights.html",
        controllerAs: "myFlights"
    }).when("/flights/:segmentId/:flightLegId/:flightId?", {
        controller: "FlightCtrl",
        templateUrl: "app/partials/_flight.html",
        controllerAs: "flight"
    }).when("/home", {
        controller: "HomeCtrl",
        templateUrl: "app/partials/_home.html",
        controllerAs: "home"
    }).when("/inbox/:flightId?", {
        controller: "InboxCtrl",
        templateUrl: "app/partials/_inbox.html",
        controllerAs: "inbox"
    }).when("/inbox/email/:id", {
        controller: "EmailCtrl",
        templateUrl: "app/partials/_email.html",
        controllerAs: "email"
    }).when("/notifications", {
        controller: "NotificationsCtrl",
        templateUrl: "app/partials/_notifications.html",
        controllerAs: "notifications"
    }).otherwise({
        redirectTo: "/login"
    });
} ]).config([ "localStorageServiceProvider", function(localStorageServiceProvider) {
    localStorageServiceProvider.setPrefix("");
} ]).run([ "$rootScope", "$location", "AuthHelper", function($rootScope, $location, AuthHelper) {
    var loginData, nextPath;
    $rootScope.$on("$routeChangeStart", function(ev, next, curr) {
        loginData = AuthHelper.isLoggedIn(), nextPath = $location.path();
    });
} ]), WeightBalanceApp.controller("HomeCtrl", [ "$scope", "$location", function($scope, $location) {
    function init() {}
    this.title = "Home", console.log(" THIS IS HOME CONTROLLER: ", this), init(), $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), WeightBalanceApp.controller("LoginCtrl", [ "$scope", "$location", "AuthHelper", function($scope, $location, AuthHelper) {
    this.title = "Login", this.user = "", $scope.login = {}, $scope.login.loginMsg = "", 
    $scope.login.loginError = !1, $scope.login.success = !1, $scope.login.showResetForm = !1, 
    console.log(" THIS IS LOGIN CONTROLLER: ", this), $scope.changeView = function(view) {
        $location.path(view);
    }, $scope.logIn = function(user) {
        AuthHelper.doLogin(user.username, user.password, function(success) {
            $scope.changeView("my-flights");
        }, function(msg) {
            $scope.login.loginMsg = msg, $scope.login.loginError = !0;
        });
    }, $scope.forgotUsername = function(username) {
        AuthHelper.doForgotUser(username, function(success) {
            $scope.login.loginMsg = "Password reset email link sent!", $scope.login.loginError = !1, 
            $scope.login.success = !0, $scope.login.showResetForm = !0;
        }, function(msg) {
            alert(msg);
        });
    };
} ]), WeightBalanceApp.controller("ResetPassCtrl", [ "$scope", "$location", "$routeParams", "AuthHelper", function($scope, $location, $routeParams, AuthHelper) {
    this.title = "Reset Password", this.user = "", $scope.reset = {}, $scope.reset.resetMsg = "", 
    $scope.reset.resetError = !1, console.log(" THIS IS RESETPASS CONTROLLER: ", this, $routeParams), 
    $scope.doResetPass = function(user) {
        user.password === user.passwordConfirm && AuthHelper.doResetPass(user.password, user.passwordConfirm, $routeParams.token, $routeParams.tenant, function(success) {
            $scope.changeView("login");
        }, function(msg) {
            $scope.reset.resetMsg = msg, $scope.reset.resetError = !0;
        });
    }, $scope.passMatch = function(pass1, pass2) {
        return angular.equals(pass1, pass2);
    }, $scope.changeView = function(view) {
        $location.path(view);
    };
} ]), WeightBalanceApp.controller("MenuCtrl", [ "$scope", "$location", "AuthHelper", "TENANT", function($scope, $location, AuthHelper, TENANT) {
    $scope.userName = TENANT.userFullName, $scope.logout = function() {
        AuthHelper.doLogOut(function() {
            $location.path("/login");
        });
    };
} ]), WeightBalanceApp.controller("FlightCtrl", [ "$scope", "$location", "$routeParams", "FlightFactory", "RemoteService", function($scope, $location, $routeParams, FlightFactory, RemoteService) {
    this.title = "This flight page", this.reqFlight = {}, this.reqFlight.bay = {}, this.reqFlight.uld = {}, 
    this.reqFlight.bc = {}, $scope.settings = {}, $scope.settings.fixedWidth = 1200, 
    $scope.settings.scaledWidth = "", $scope.settings.showLowerDeck = !0, $scope.settings.showUpperDeck = !1, 
    $scope.settings.showInboundDeck = !1, $scope.settings.showMainDeck = !1, $scope.settings.showBaggage = !1, 
    $scope.settings.showCargo = !1, $scope.amendData = {}, $scope.amendData.basicWeight = "", 
    $scope.fuelData = {}, $scope.fuelData.standard = {}, $scope.fuelData.settings = {}, 
    $scope.fuelData.nonStandard = {}, $scope.fuelData.settings = {}, $scope.master = {}, 
    $scope.master.fuelData = {}, $scope.amend_flight_data_flag = !1, $scope.tabs = {}, 
    $scope.isFlightPage = !0, $scope.openFuelPopupFlag = !1, $scope.canAddNewUld = !0, 
    $scope.loadCargo = {}, $scope.loadCargo.unitData = {}, $scope.loadCargo.bulkData = {}, 
    $scope.loadCargo.isUldEnable = !1, $scope.loadCargo.destinations = {}, $scope.loadCargo.uldParams = {}, 
    $scope.loadCargo.loadCategories = {}, $scope.loadCargo.specialLoadParams = {}, $scope.loadCargo.openCargoEntry = !1, 
    console.log(" THIS IS FLIGHT! CONTROLLER: ", this, $scope);
    var getFlight = FlightFactory.getFlight($routeParams);
    getFlight && getFlight.then(angular.bind(this, function(response) {
        this.reqFlight = response, this.reqFlight.bay = this.reqFlight.lowerDeckLayout.layout, 
        this.reqFlight.uld = this.reqFlight.lowerDeckLayout.ulds, $scope.settings.scaledWidth = FlightFactory.px2InchRatio($scope.settings.fixedWidth, this.reqFlight.lowerDeckLayout.deckLength), 
        this.reqFlight.settings = {}, this.reqFlight.settings.dryOperatingWeight = this.reqFlight.basicFlightDetails.dryOperatingWeight, 
        $scope.tabs.currentFuelTab = 1 == this.reqFlight.basicFlightDetails.standardFuel ? "#sfl" : "#nsfl", 
        $scope.tabs.currentFuelOption = this.reqFlight.basicFlightDetails.standardFuel, 
        getBaggageCategories.call(this);
    }));
    var getBaggageCategories = function() {
        var getBaggageCategories = FlightFactory.getBaggageCategories($routeParams.flightLegId);
        getBaggageCategories.then(angular.bind(this, function(baggageCategories) {
            this.reqFlight.bc = baggageCategories;
            var cg = [ "C", "X", "F" ];
            angular.forEach(this.reqFlight.bc.baggageCategories, function(uld) {
                uld.uldCompatibilityGroup = cg[Math.floor(3 * Math.random())];
            });
        }), function(error) {
            console.log("baggage category retrieval failure");
        });
    };
    $scope.openCargoPopup = function(flightLegId) {
        $scope.loadCargo.openCargoEntry = !0, $scope.canAddNewUld = !0, flightLegId && $scope.getCargoPopupData(flightLegId);
    }, $scope.getCargoPopupData = function(flightLegId) {
        var cargoData = FlightFactory.getCargoData(flightLegId);
        cargoData && cargoData.then(angular.bind(this, function(response) {
            FlightFactory.cargoData = response, $scope.loadCargo.unitData = FlightFactory.cargoData.unitLoadParams, 
            $scope.loadCargo.bulkData = FlightFactory.cargoData.bulkLoadParams, $scope.loadCargo.destinations = FlightFactory.cargoData.destinations, 
            $scope.loadCargo.uldParams = FlightFactory.cargoData.uldParams, $scope.loadCargo.loadCategories = FlightFactory.cargoData.loadCategories, 
            $scope.loadCargo.specialLoadParams = FlightFactory.cargoData.specialLoadParams, 
            $scope.loadCargo.isUldEnable = FlightFactory.cargoData.isUldEnable, angular.forEach($scope.loadCargo.unitData, function(value, key) {
                angular.isUndefined(value.isReviewed) || (value.canEditRow = value.isReviewed), 
                !angular.isUndefined(value.specialLoadParams) && value.specialLoadParams.length && angular.forEach(value.specialLoadParams, function(val, keys) {
                    val.weight || (val.weight = "");
                });
            }), angular.forEach($scope.loadCargo.bulkData, function(value, key) {
                angular.forEach(value.bulkLoadCategoryParamList, function(val, keys) {
                    angular.isUndefined(val.isReviewed) || (val.canEditRowCargo = val.isReviewed), !angular.isUndefined(val.specialLoadParams) && val.specialLoadParams.length && angular.forEach(val.specialLoadParams, function(ival, ikeys) {
                        ival.weight || (ival.weight = "");
                    });
                });
            }), angular.forEach($scope.loadCargo.uldParams, function(value, key) {
                angular.forEach($scope.loadCargo.unitData, function(val, keys) {
                    parseInt(value.uldSpecsId, 10) === parseInt(val.uldSpecsId, 10) && $scope.calculateNetWeight(val, value.maxWeight, value.tareWeight);
                });
            });
        })), console.log("get cargo data:", $scope.loadCargo);
    }, $scope.updateUldParamList = function(uldId, obj) {
        console.log("udate cargo uld code: ", obj, uldId), angular.isUndefined(obj) || angular.forEach($scope.loadCargo.uldParams, function(value, key) {
            parseInt(value.uldSpecsId, 10) === parseInt(uldId, 10) && $scope.calculateNetWeight(obj, value.maxWeight, value.tareWeight);
        });
    }, $scope.setDefaultSelectList = function(allValues, defaultValue) {
        return allValues === defaultValue;
    }, $scope.calculateNetWeight = function(obj, maxWeight, tareWeight) {
        angular.isUndefined(obj) || (obj.netWeight = obj.grossWeight > tareWeight ? parseInt(obj.grossWeight - tareWeight, 10) : 0, 
        obj.globalTareWeight = tareWeight, obj.globalMaxWeight = maxWeight, console.log("calculateNetWeight:", obj.netWeight, obj.globalTareWeight, obj.globalMaxWeight));
    }, $scope.updateNetWeight = function(obj) {
        angular.isUndefined(obj) || (obj.netWeight = obj.grossWeight > obj.globalTareWeight ? parseInt(obj.grossWeight - obj.globalTareWeight, 10) : 0, 
        console.log(obj.netWeight));
    }, $scope.togglePopup = function(fleetCode, flightLegId, aircraftId, flag) {
        if (console.log("Amend flight data popup!"), fleetCode && flightLegId && aircraftId) {
            var getAmendedData = FlightFactory.getAmendData(fleetCode, flightLegId, aircraftId);
            getAmendedData && getAmendedData.then(angular.bind(this, function(response) {
                FlightFactory.amendedData = response, $scope.amendData = FlightFactory.amendedData, 
                $scope.amendData.model = {}, $scope.amendData.labels = {}, $scope.amendData.aircraftId = response.aircraftId, 
                $scope.amendData.model.zfw = $scope.amendData.regulatedValues.regZeroFuelWeight ? $scope.amendData.regulatedValues.regZeroFuelWeight : $scope.amendData.maxValues.maximumZeroFuelWeight, 
                $scope.amendData.labels.maximumZeroFuelWeightLabel = $scope.amendData.regulatedValues.regZeroFuelWeight ? "Regulated" : "MAX", 
                $scope.amendData.model.tow = $scope.amendData.regulatedValues.regTakeOffWeight ? $scope.amendData.regulatedValues.regTakeOffWeight : $scope.amendData.maxValues.maximumTakeOffWeight, 
                $scope.amendData.labels.maximumTakeOffWeightLabel = $scope.amendData.regulatedValues.regTakeOffWeight ? "Regulated" : "MAX", 
                $scope.amendData.model.ldw = $scope.amendData.regulatedValues.regLandingWeight ? $scope.amendData.regulatedValues.regLandingWeight : $scope.amendData.maxValues.maximumLandingWeight, 
                $scope.amendData.labels.maximumLandingWeightLabel = $scope.amendData.regulatedValues.regLandingWeight ? "Regulated" : "MAX", 
                $scope.amendData.model.rmp = $scope.amendData.regulatedValues.regRampWeight ? $scope.amendData.regulatedValues.regRampWeight : $scope.amendData.maxValues.maximumRampWeight, 
                $scope.amendData.labels.maximumRampWeightLabel = $scope.amendData.regulatedValues.regRampWeight ? "Regulated" : "MAX", 
                angular.forEach($scope.amendData.aircraftRegistrations, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.aircraftRegistration = value.aircraftRegistration, 
                    $scope.amendData.validateRegistration = value.aircraftId, console.log("label aircraftRegistration: ", $scope.amendData.labels.aircraftRegistration, $scope.amendData.validateRegistration));
                }), angular.forEach($scope.amendData.feetTypes, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.fleetCode = value.fleetCode, $scope.amendData.validateFleet = value.fleetCode, 
                    console.log("label fleetCode: ", $scope.amendData.labels.fleetCode, $scope.amendData.validateFleet));
                }), angular.forEach($scope.amendData.currentCabinConfigurations, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.configuration = value.configuration, 
                    $scope.amendData.validateCabinConfiguration = value.configurationId, console.log("label cabin config: ", $scope.amendData.labels.configuration, $scope.amendData.validateCabinConfiguration));
                }), angular.forEach($scope.amendData.flightAmenities.pantries, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.pantry = value.name, $scope.amendData.validatePantry = value.volatileValuesId, 
                    $scope.amendData.validatePantryWeight = value.weightAdj, $scope.amendData.validatePantryType = value.type, 
                    console.log("label pantry: ", $scope.amendData.labels.pantry, $scope.amendData.validatePantry));
                }), angular.forEach($scope.amendData.flightAmenities.crews, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.crew = value.name, $scope.amendData.validateCrew = value.volatileValuesId, 
                    $scope.amendData.validateCrewWeight = value.weightAdj, $scope.amendData.validateCrewType = value.type, 
                    console.log("label crews: ", $scope.amendData.labels.crew, $scope.amendData.validateCrew));
                });
            }));
        }
        return console.warn("Amended data:: ", $scope), $scope.amend_flight_data_flag = !flag, 
        $scope.amend_flight_data_flag;
    }, $scope.updateFleetCode = function(fleetCode, flightLegId, aircraftId) {
        if (console.log("updateFleetCode: ", fleetCode, flightLegId), fleetCode && flightLegId) {
            var updateAmendedData = FlightFactory.getAmendData(fleetCode, flightLegId, aircraftId);
            updateAmendedData && updateAmendedData.then(angular.bind(this, function(response) {
                FlightFactory.amendedData = response, $scope.amendData = FlightFactory.amendedData, 
                $scope.amendData.model = {}, $scope.amendData.labels = {}, $scope.amendData.model.zfw = $scope.amendData.regulatedValues.regZeroFuelWeight ? $scope.amendData.regulatedValues.regZeroFuelWeight : $scope.amendData.maxValues.maximumZeroFuelWeight, 
                $scope.amendData.labels.maximumZeroFuelWeightLabel = $scope.amendData.regulatedValues.regZeroFuelWeight ? "Regulated" : "MAX", 
                $scope.amendData.model.tow = $scope.amendData.regulatedValues.regTakeOffWeight ? $scope.amendData.regulatedValues.regTakeOffWeight : $scope.amendData.maxValues.maximumTakeOffWeight, 
                $scope.amendData.labels.maximumTakeOffWeightLabel = $scope.amendData.regulatedValues.regTakeOffWeight ? "Regulated" : "MAX", 
                $scope.amendData.model.ldw = $scope.amendData.regulatedValues.regLandingWeight ? $scope.amendData.regulatedValues.regLandingWeight : $scope.amendData.maxValues.maximumLandingWeight, 
                $scope.amendData.labels.maximumLandingWeightLabel = $scope.amendData.regulatedValues.regLandingWeight ? "Regulated" : "MAX", 
                $scope.amendData.model.rmp = $scope.amendData.regulatedValues.regRampWeight ? $scope.amendData.regulatedValues.regRampWeight : $scope.amendData.maxValues.maximumRampWeight, 
                $scope.amendData.labels.maximumRampWeightLabel = $scope.amendData.regulatedValues.regRampWeight ? "Regulated" : "MAX", 
                angular.forEach($scope.amendData.aircraftRegistrations, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.aircraftRegistration = value.aircraftRegistration, 
                    $scope.amendData.validateRegistration = value.aircraftId, console.log("label aircraftRegistration 1: ", $scope.amendData.labels.aircraftRegistration, $scope.amendData.validateRegistration)), 
                    $scope.amendData.currentCabinConfigurations = value.cabinConfigurations, $scope.amendData.flightAmenities.pantries = value.pantries, 
                    $scope.amendData.flightAmenities.crews = value.crews, angular.forEach($scope.amendData.flightAmenities.pantries, function(value, key) {
                        value.status === !0 && ($scope.amendData.labels.pantry = value.name, $scope.amendData.validatePantry = value.volatileValuesId, 
                        $scope.amendData.validatePantryWeight = value.weightAdj, $scope.amendData.validatePantryType = value.type, 
                        console.log("label pantry: ", $scope.amendData.labels.pantry, $scope.amendData.validatePantry));
                    }), angular.forEach($scope.amendData.flightAmenities.crews, function(value, key) {
                        value.status === !0 && ($scope.amendData.labels.crew = value.name, $scope.amendData.validateCrew = value.volatileValuesId, 
                        $scope.amendData.validateCrewWeight = value.weightAdj, $scope.amendData.validateCrewType = value.type, 
                        console.log("label crews: ", $scope.amendData.labels.crew, $scope.amendData.validateCrew));
                    });
                }), angular.forEach($scope.amendData.feetTypes, function(value, key) {
                    value.status === !0 && ($scope.amendData.labels.fleetCode = value.fleetCode, $scope.amendData.validateFleet = value.fleetCode, 
                    console.log("label fleetCode 1: ", $scope.amendData.labels.fleetCode, $scope.amendData.validateFleet));
                });
            }));
        }
    }, $scope.resetCabinConfig = function(data) {
        console.log("Reset AC REG - new cabin c0nfig: ", parseInt(data, 10)), data && ($scope.amendData.validateRegistration = parseInt(data, 10)), 
        angular.forEach($scope.amendData.aircraftRegistrations, function(value, key) {
            $scope.amendData.labels.configuration = "", $scope.amendData.model.configuration = "", 
            $scope.amendData.validateCabinConfiguration = value.configurationId, parseInt(value.aircraftId, 10) === parseInt(data, 10) && ($scope.amendData.currentCabinConfigurations = value.cabinConfigurations, 
            console.warn("new cabin config after AC REG change:", $scope.amendData.currentCabinConfigurations, $scope.amendData.model.cabinConfigReset));
        });
    }, $scope.getRegById = function(data) {
        if (data) {
            var a = "";
            return angular.forEach($scope.amendData.aircraftRegistrations, function(value, key) {
                parseInt(value.aircraftId, 10) === parseInt(data, 10) && (a = value.aircraftRegistration);
            }), a;
        }
    }, $scope.getConfigById = function(data) {
        if (data) {
            var a = "";
            return angular.forEach($scope.amendData.currentCabinConfigurations, function(value, key) {
                parseInt(value.configurationId, 10) === parseInt(data, 10) && (a = value.configuration);
            }), a;
        }
    }, $scope.validateCabinConfig = function(data) {
        data && ($scope.amendData.validateCabinConfiguration = data, console.log("validateCabinConfig ", data));
    }, $scope.validatePantry = function(data, amenitiesId) {
        data && ($scope.amendData.validatePantry = data, console.log("validatePantry ", data, amenitiesId), 
        angular.forEach($scope.amendData.flightAmenities.pantries, function(value, key) {
            value.volatileValuesId === parseInt(data, 10) && ($scope.amendData.labels.pantry = value.name, 
            $scope.amendData.validatePantry = value.volatileValuesId, $scope.amendData.validatePantryWeight = value.weightAdj, 
            $scope.amendData.validatePantryType = value.type, $scope.updateBasicWeightValue($scope.amendData));
        }));
    }, $scope.validateCrew = function(data, amenitiesId) {
        data && ($scope.amendData.validateCrew = data, console.log("validateCrew ", data, amenitiesId), 
        angular.forEach($scope.amendData.flightAmenities.crews, function(value, key) {
            value.volatileValuesId === parseInt(data, 10) && ($scope.amendData.labels.crew = value.name, 
            $scope.amendData.validateCrew = value.volatileValuesId, $scope.amendData.validateCrewWeight = value.weightAdj, 
            $scope.amendData.validateCrewType = value.type, $scope.updateBasicWeightValue($scope.amendData));
        }));
    }, $scope.updateBasicWeightValue = function(data) {
        var param = {};
        param.fleetCode = data.fleetCode, param.aircraftId = parseInt(data.aircraftId, 10), 
        param.pantry = {}, param.pantry.volatileValuesId = parseInt(data.validatePantry, 10) || 0, 
        param.pantry.weightAdj = data.validatePantryWeight || 0, param.pantry.type = data.validatePantryType || 0, 
        param.crew = {}, param.crew.volatileValuesId = parseInt(data.validateCrew, 10) || 0, 
        param.crew.weightAdj = data.validateCrewWeight || 0, param.crew.type = data.validateCrewType || 0;
        var promise = RemoteService.updateBasicWeightData(param);
        promise.then(function(data) {
            $scope.amendData.basicWeight = data, console.log("$scope.amendData.basicWeight: ", $scope.amendData.basicWeight);
        }, function(error) {
            fail(error.msg);
        });
    }, $scope.openFuelPopup = function(flightLegId) {
        if (console.log("Fuel popup!", "###Is standard fuel??: ", $scope.tabs.currentFuelOption, flightLegId), 
        $scope.tabs.currentFuelOption) {
            if ($scope.tabs.currentFuelTab = "#sfl", flightLegId) {
                var getStandardFuel = FlightFactory.getFuelData(flightLegId, $scope.tabs.currentFuelOption);
                getStandardFuel && getStandardFuel.then(angular.bind(this, function(response) {
                    FlightFactory.fuelData = response, $scope.fuelData.standard = FlightFactory.fuelData, 
                    $scope.master.fuelData = angular.copy(FlightFactory.fuelData), $scope.fuelData.nonStandard = "";
                })), console.log("get stf:", $scope.fuelData);
            }
        } else if ($scope.tabs.currentFuelTab = "#nsfl", flightLegId) {
            var getNonStandardFuel = FlightFactory.getFuelData(flightLegId, $scope.tabs.currentFuelOption);
            getNonStandardFuel && getNonStandardFuel.then(angular.bind(this, function(response) {
                FlightFactory.fuelData = response, $scope.fuelData.nonStandard = FlightFactory.fuelData, 
                $scope.master.fuelData = angular.copy(FlightFactory.fuelData), $scope.fuelData.standard = "";
            })), console.log("get nstf:", $scope.fuelData);
        }
        $scope.openFuelPopupFlag = !0;
    }, $scope.changeDensity = function(vars) {
        parseInt(vars, 10) && (angular.isUndefined($scope.fuelData.standard.fleetDensityParams) || (console.log(parseInt(vars, 10), $scope.fuelData.standard), 
        angular.forEach($scope.fuelData.standard.fleetDensityParams, function(value, key) {
            parseInt(value.densityId, 10) === parseInt(vars, 10) && ($scope.fuelData.settings.standard = {}, 
            $scope.fuelData.settings.standard.maxWeight = value.maxWeight);
        })), angular.isUndefined($scope.fuelData.nonStandard.fleetDensityParams) || (console.log(parseInt(vars, 10), $scope.fuelData.nonStandard), 
        angular.forEach($scope.fuelData.nonStandard.fleetDensityParams, function(value, key) {
            parseInt(value.densityId, 10) === parseInt(vars, 10) && ($scope.fuelData.settings.nonStandard = {}, 
            $scope.fuelData.settings.nonStandard.maxWeight = value.maxWeight);
        })));
    }, $scope.onClickTab = function(tab, flightLegId) {
        if ($scope.tabs.currentFuelTab = tab, $scope.settings.show_goto_sfl = !1, $scope.settings.show_goto_nsfl = !1, 
        $scope.tabs.is_standard_fuel = !1, $scope.tabs.is_nonstandard_fuel = !1, console.log("onClickTab for switch: ", tab, flightLegId, $scope.tabs.currentFuelOption), 
        flightLegId) {
            var switchedFuelData = FlightFactory.switchFuelType(flightLegId, !$scope.tabs.currentFuelOption);
            switchedFuelData && switchedFuelData.then(angular.bind(this, function(response) {
                console.warn(response), response.isStandard ? (FlightFactory.fuelData = response, 
                $scope.fuelData.standard = FlightFactory.fuelData, $scope.master.fuelData = angular.copy(FlightFactory.fuelData), 
                $scope.fuelData.nonStandard = {}, $scope.tabs.currentFuelOption = response.isStandard) : (FlightFactory.fuelData = response, 
                $scope.fuelData.nonStandard = FlightFactory.fuelData, $scope.master.fuelData = angular.copy(FlightFactory.fuelData), 
                $scope.fuelData.standard = {}, $scope.tabs.currentFuelOption = response.isStandard);
            }));
        }
    }, $scope.submitStandardFuelData = function(flightLegId) {
        flightLegId && FlightFactory.submitStandardFuelData($scope.fuelData.standard, flightLegId);
    }, $scope.submitNonStandardFuelData = function(flightLegId) {
        flightLegId && FlightFactory.submitNonStandardFuelData($scope.fuelData.nonStandard, flightLegId);
    }, $scope.submitAmendData = function(flightLegId, flightId) {
        flightLegId && flightId && FlightFactory.submitAmendData($scope.amendData, flightLegId, flightId);
    }, $scope.isActiveTab = function(tabUrl) {
        return tabUrl == $scope.tabs.currentFuelTab;
    }, $scope.isUnchanged = function(data) {
        return angular.equals(data, $scope.master.fuelData);
    }, $scope.setStyle = function(centroid, width, height, lateral_adjust, uld_compatibility_group) {
        var axisPoint = parseFloat(centroid * $scope.settings.scaledWidth).toFixed(2), width = parseFloat(width * $scope.settings.scaledWidth).toFixed(2), height = parseFloat(height * $scope.settings.scaledWidth).toFixed(2), lateralAdjust = parseFloat(lateral_adjust).toFixed(2), compatibility = uld_compatibility_group;
        switch (compatibility) {
          case "A":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "B":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "C":
            if (lateralAdjust > 0) return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                top: "50%",
                marginTop: -1 * parseInt(height, 10) + "px"
            };
            if (0 > lateralAdjust) return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                bottom: "50%",
                marginBottom: -1 * parseInt(height, 10) + "px"
            };
            break;

          case "X":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                top: "50%",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "G":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                top: "50%",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "E":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "D":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "F":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "NA":
            return {
                width: width + "px",
                height: height + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                marginTop: -1 * parseInt(height / 2, 10) + "px"
            };
            break;

          case "TY":
            if (lateralAdjust > 0) return {
                width: width + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                top: "0px"
            };
            if (0 > lateralAdjust) return {
                width: width + "px",
                right: parseFloat(axisPoint - width / 2).toFixed(2) + "px",
                bottom: "0px"
            };
            break;

          default:
            return !1;
        }
    }, $scope.uldSetStyle = function(width, height, uld_compatibility_group) {
        var width = parseFloat(width * $scope.settings.scaledWidth).toFixed(2), height = parseFloat(height * $scope.settings.scaledWidth).toFixed(2);
        return {
            width: width + "px",
            height: height + "px",
            marginTop: -1 * parseInt(height / 2, 10) + "px",
            marginLeft: -1 * parseInt(width / 2, 10) + "px"
        };
    }, $scope.addMoreDg = function(data) {
        console.log(data, data.length);
        var tempObj = {};
        tempObj.specLoadId = data.specLoadId ? data.specLoadId : "", tempObj.weight = "", 
        angular.isUndefined(data) || data.push(tempObj);
    }, $scope.addFirstDgInput = function(status, data) {
        console.log(data, status), status && data.length < 1 && $scope.addMoreDg(data);
    }, $scope.emptyCargoDg = function(data, obj) {
        console.log(data, data.length, obj), angular.isUndefined(data) || angular.isUndefined(obj) || data.splice(data.indexOf(obj), 1);
    }, $scope.emptyCargoUnitRows = function(data, obj) {
        console.log(data, data.length, obj), angular.isUndefined(data) || angular.isUndefined(obj) || (obj.deadLoadId ? (FlightFactory.emptyCargoUnitRows(data, obj), 
        $scope.canAddNewUld = !0) : (data.splice(data.indexOf(obj), 1), $scope.canAddNewUld = !0));
    }, $scope.emptyCargoBulkRows = function(obj) {
        console.log(obj), angular.isUndefined(obj) || (obj.deadLoadId ? FlightFactory.emptyCargoBulkRows(obj) : (obj.canEditRowCargo = !1, 
        obj.unlockSpecialLoad = !1, obj.grossWeight = 0, obj.specialLoadLabel = "", obj.specialLoadParams = []));
    }, $scope.addNewUld = function() {
        console.log("new uld", $scope.loadCargo.unitData, $scope.loadCargo.unitData.length);
        var tempObj = {};
        tempObj.specialLoadParams = [], angular.isUndefined(tempObj) || ($scope.loadCargo.unitData.push(tempObj), 
        $scope.canAddNewUld = !1);
    }, $scope.changeDeckView = function(tab) {
        switch (tab) {
          case "ud":
            $scope.settings.showLowerDeck = !1, $scope.settings.showUpperDeck = !0, $scope.settings.showInboundDeck = !1, 
            $scope.settings.showMainDeck = !1;
            break;

          case "ld":
            $scope.settings.showLowerDeck = !0, $scope.settings.showUpperDeck = !1, $scope.settings.showInboundDeck = !1, 
            $scope.settings.showMainDeck = !1;
            break;

          case "ib":
            $scope.settings.showLowerDeck = !1, $scope.settings.showUpperDeck = !1, $scope.settings.showMainDeck = !1, 
            $scope.settings.showInboundDeck = !0;
            break;

          case "md":
            $scope.settings.showLowerDeck = !1, $scope.settings.showUpperDeck = !1, $scope.settings.showMainDeck = !0, 
            $scope.settings.showInboundDeck = !1;
            break;

          default:
            $scope.settings.showLowerDeck = !0, $scope.settings.showUpperDeck = !1, $scope.settings.showInboundDeck = !1, 
            $scope.settings.showMainDeck = !1;
        }
    }, $scope.detachUld = function(id) {
        alert("detachUld ID:", id);
    }, $scope.submitCargoUnit = function(data, flightLegId, flightSegId) {
        if (flightLegId && flightSegId) {
            var param = {};
            param.deadLoadId = data.deadLoadId ? data.deadLoadId : null, param.destination = data.destination, 
            param.grossWeight = data.grossWeight, param.isReviewed = data.isReviewed ? data.isReviewed : !0, 
            param.loadCategory = data.loadCategory, param.uldNumber = data.uldNumber, param.uldOwner = data.uldOwner, 
            param.uldSpecsId = data.uldSpecsId, param.unlockSpecialLoad = data.unlockSpecialLoad, 
            param.specialLoadParams = [];
            var promise = RemoteService.submitCargoUnit(param, flightLegId, flightSegId);
            if (data.specialLoadParams.length && data.unlockSpecialLoad) for (var i = 0, l = data.specialLoadParams.length; l > i; i++) param.specialLoadParams[i] = {}, 
            param.specialLoadParams[i].specLoadId = data.specialLoadParams[i].specLoadId, param.specialLoadParams[i].weight = data.specialLoadParams[i].weight;
            promise.then(function(data) {
                $scope.getCargoPopupData(flightLegId), $scope.canAddNewUld = !0;
            }, function(error) {
                fail(error.msg);
            });
        }
    }, $scope.submitCargoBulk = function(data, flightLegId, flightSegId, destination) {
        if (flightLegId && flightSegId && destination) {
            var param = {};
            param.deadLoadId = data.deadLoadId ? data.deadLoadId : null, param.loadCategory = data.loadCategory, 
            param.unlockSpecialLoad = data.unlockSpecialLoad, param.grossWeight = data.grossWeight, 
            param.isReviewed = !0, param.specialLoadParams = [];
            var promise = RemoteService.submitCargoBulk(param, flightLegId, flightSegId, destination);
            if (data.specialLoadParams.length && data.unlockSpecialLoad) for (var i = 0, l = data.specialLoadParams.length; l > i; i++) param.specialLoadParams[i] = {}, 
            param.specialLoadParams[i].specLoadId = data.specialLoadParams[i].specLoadId, param.specialLoadParams[i].weight = data.specialLoadParams[i].weight;
            promise.then(function(data) {
                $scope.getCargoPopupData(flightLegId);
            }, function(error) {
                fail(error.msg);
            });
        }
    };
} ]), WeightBalanceApp.controller("FlightsCtrl", [ "$scope", "$location", "FlightsFactory", function($scope, $location, FlightsFactory) {
    this.title = "Flights page!", this.flights = {}, this.hours = 24, this.date = new Date(), 
    this.myWorkingHours = [], this.dayOfWeek = this.date.getDay(), this.currentHour = this.date.getHours(), 
    this.timespanWidth = parseFloat(100 / this.hours).toFixed(3);
    var allHours = [], todayHours = [], tomorrowHours = [];
    console.log(" THIS IS FLIGHTS CONTROLLER: ", this), FlightsFactory.getFlights().then(angular.bind(this, function() {
        this.flights = FlightsFactory.flights, $scope.$watch(function() {
            return FlightsFactory.flights;
        }, function(newVal, oldVal) {
            console.warn("newVal, oldVal: ", newVal, oldVal), "undefined" != typeof newVal && ($scope.myFlights.flights = FlightsFactory.flights);
        });
    })), $scope.setFlightToMinutes = function(timestamp) {
        var flightDate = new Date(timestamp), flightMinutes = (flightDate.getHours(), flightDate.getMinutes()), minutesOffset = parseFloat(100 * flightMinutes / 60).toFixed(3);
        return {
            left: minutesOffset + "%"
        };
    }, $scope.goToFlight = function(segmentId, flightLegId, checkinOpen, flightId) {
        FlightsFactory.goToFlight(segmentId, flightLegId, checkinOpen, flightId);
    }, $scope.addToMyFlights = function(obj, type) {
        FlightsFactory.addToMyFlights(obj, type);
    }, $scope.removeFlight = function(obj, from) {
        FlightsFactory.removeFromMyFlights(obj, from);
    }, $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
    for (var i = 0; i < this.hours; i++) allHours.push(i);
    for (var i = this.currentHour; i < this.hours; i++) todayHours.push(i);
    $.each(allHours, function(key) {
        -1 === todayHours.indexOf(key) && tomorrowHours.push(key);
    }), this.myWorkingHours = todayHours.concat(tomorrowHours);
} ]), WeightBalanceApp.controller("InboxCtrl", [ "$scope", "$location", "InboxFactory", "$routeParams", function($scope, $location, InboxFactory, $routeParams) {
    this.title = "Inbox", this.messages = {}, this.flightId = $routeParams.flightId, 
    console.log(" THIS IS INBOX CONTROLLER: ", this), $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), WeightBalanceApp.controller("EmailCtrl", [ "$scope", "$location", "InboxFactory", function($scope, $location, InboxFactory) {
    this.title = "Email read", this.email = {}, console.log(" THIS IS EMAIL CONTROLLER: ", this), 
    $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), WeightBalanceApp.controller("NotificationsCtrl", [ "$scope", "$location", function($scope, $location) {
    this.title = "Notifications", this.notifications = {}, console.log(" THIS IS NOTIFICATIONS CONTROLLER: ", this), 
    $scope.getClass = function(path) {
        return $location.path().substr(0, path.length) == path ? "current" : "";
    };
} ]), angular.module("WeightBalanceApp").directive("inbox", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            flightId: "="
        },
        templateUrl: "app/directives/inbox.tmpl.html",
        controllerAs: "viewInbox",
        controller: function($scope) {
            this.inboxMessages = {}, void 0 != $scope.flightId ? InboxFactory.getFlightMessages($scope.flightId).then(angular.bind(this, function() {
                this.inboxMessages = InboxFactory.messages;
            })) : InboxFactory.getMessages().then(angular.bind(this, function() {
                this.inboxMessages = InboxFactory.messages;
            })), console.warn("this.inboxMessages InboxDirective: ", this), this.goToMessage = function(id) {
                InboxFactory.goToMessage(id);
            }, this.deleteMessage = function(id, index) {
                InboxFactory.deleteMessage(id, index);
            };
        },
        link: function(scope, element, attrs, ctrl) {}
    };
} ]), angular.module("WeightBalanceApp").directive("inboxContext", [ "InboxFactory", "$location", function(InboxFactory, $location) {
    return {
        restrict: "A",
        link: function(scope, element, attrs, ctrl) {
            angular.element(element).on("click", function() {
                var param, flightsHashPattern = /^(\/flights\/)(\d+\/)(\d+\/)(\d+)$/, inboxForFlightPattern = /^(\/inbox\/)(\d+)$/;
                flightsHashPattern.test($location.path()) || inboxForFlightPattern.test($location.path()) ? (param = $location.path().split("/"), 
                $location.path("/inbox/" + param[param.length - 1])) : $location.path("/inbox"), 
                scope.$apply();
            });
        }
    };
} ]), angular.module("WeightBalanceApp").directive("scroll", [ function() {
    return {
        restrict: "A",
        scope: {
            direction: "@",
            itemWidth: "@",
            totalNoItems: "@",
            noItemsShow: "@",
            containerId: "@"
        },
        link: function(scope, ele, attr) {
            var isRightScrollable = function(itemWidth, noItemsVisible, totalItems, yPos) {
                itemWidth = parseInt(itemWidth), noItemsVisible = parseInt(noItemsVisible), totalItems = parseInt(totalItems);
                var offsetWidth, flag = !1;
                return totalItems > noItemsVisible && (offsetWidth = (totalItems - noItemsVisible) * itemWidth * -1, 
                yPos > offsetWidth && (flag = !0)), flag;
            };
            angular.element(ele).on("click", function() {
                var target = angular.element("#" + scope.containerId), current = parseInt(target.css("left"));
                "left" == scope.direction ? 0 > current && (current += parseInt(scope.itemWidth), 
                current > 0 && (current = 0), target.css("left", current + "px")) : (current += -1 * parseInt(scope.itemWidth), 
                isRightScrollable(scope.itemWidth, scope.noItemsShow, scope.totalNoItems, current) && target.css("left", current + "px"));
            });
        }
    };
} ]), angular.module("WeightBalanceApp").directive("email", [ "$timeout", "EmailFactory", "$routeParams", function($timeout, EmailFactory, $routeParams) {
    "use strict";
    return {
        restrict: "E",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/email.tmpl.html",
        controllerAs: "email",
        controller: function() {
            this.message = {}, this.reply = function(message) {
                EmailFactory.reply(message);
            };
            var getmessage = EmailFactory.getMessage($routeParams);
            getmessage && getmessage.then(angular.bind(this, function(response) {
                EmailFactory.message = response, this.message = EmailFactory.message, this.message.content = this.message.content.replace(/(\r\n|\n|\r)/gm, "<br>");
            })), console.warn("Email directive / Page: ", this);
        },
        link: function(scope, element, attrs, ctrl) {
            var textarea = element.find(".email__response-text")[0];
            scope.$watch("reply", function(newVal, oldVal) {
                newVal !== oldVal && newVal && $timeout(function() {
                    textarea.focus();
                }, 0);
            });
        }
    };
} ]), angular.module("WeightBalanceApp").directive("nrmess", [ "InboxFactory", "$location", function(InboxFactory, $location) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/nrmessages.tmpl.html",
        controllerAs: "nrmessages",
        controller: function() {
            var parts = $location.path().split("/"), flightsHashPattern = /^(\/flights\/)(\d+\/)(\d+\/)(\d+)$/, inboxForFlightPattern = /^(\/inbox\/)(\d+)$/, flightId = null;
            flightsHashPattern.test($location.path()) || inboxForFlightPattern.test($location.path()) ? (flightId = parts[parts.length - 1], 
            InboxFactory.getFlightMessages(flightId).then(angular.bind(this, function() {
                this.unreadMessages = InboxFactory.unreadMessages;
            }))) : InboxFactory.getMessages().then(angular.bind(this, function() {
                this.unreadMessages = InboxFactory.unreadMessages;
            }));
        },
        link: function(scope, element, attrs, ctrl) {}
    };
} ]), angular.module("WeightBalanceApp").directive("nrnotif", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/nrnotif.tmpl.html",
        controllerAs: "nrnotif",
        controller: function() {
            this.notifications = {}, InboxFactory.getNotifications().then(angular.bind(this, function() {
                this.notifications = InboxFactory.notifications;
            })), console.warn("this.nrnotif Nr : ", this);
        },
        link: function(scope, element, attrs, ctrl) {}
    };
} ]), angular.module("WeightBalanceApp").directive("notification", [ "InboxFactory", function(InboxFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/notification.tmpl.html",
        controllerAs: "notificationPage",
        controller: function() {
            this.notification = {}, InboxFactory.getNotifications().then(angular.bind(this, function() {
                this.notification = InboxFactory.notifications;
            })), console.warn("this.notification page: ", this);
        },
        link: function(scope, element, attrs, ctrl) {}
    };
} ]), angular.module("WeightBalanceApp").directive("cdl", [ "CdlFactory", function(CdlFactory) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: !0,
        templateUrl: "app/directives/cdl.tmpl.html",
        controllerAs: "cdl",
        controller: function() {
            this.cdlItems = {}, CdlFactory.getCdlItems().then(angular.bind(this, function() {
                this.cdlItems = CdlFactory.cdlItems;
            })), this.submitReportCdl = function(cdl) {
                console.log("cdl: ", cdl), angular.isUndefined(cdl.cdlItems) || angular.isUndefined(cdl.newCdl) || CdlFactory.submitReportCdl(cdl.cdlItems, cdl.newCdl);
            }, console.warn("this.cdlItems page: ", this);
        },
        link: function(scope, element, attrs, ctrl) {}
    };
} ]), angular.module("WeightBalanceApp").directive("draggable", [ "$timeout", function($timeout) {
    "use strict";
    return {
        restrict: "A",
        scope: !1,
        link: function(scope, element, attrs) {
            $timeout(function() {
                var dropTarget = $(".compatibilityClass" + attrs.draggable).not(".uld_assigned");
                element.draggable({
                    start: function() {
                        console.log("START!"), $(".lowerDeck").addClass("workingWith" + attrs.draggable);
                    },
                    drag: function() {
                        console.log("DRAG!");
                    },
                    stop: function() {
                        $(".lowerDeck").removeClass("workingWith" + attrs.draggable), console.log("STOP!");
                    },
                    revert: function(event, ui) {
                        return !event;
                    },
                    addClasses: !1,
                    opacity: .5,
                    scope: "compatible" + attrs.draggable,
                    zIndex: 200,
                    cursor: "move",
                    containment: ".container_page",
                    snap: ".centroids.compatibilityClass" + attrs.draggable,
                    snapMode: "inner",
                    snapTolerance: 30,
                    refreshPositions: !0
                }), dropTarget.droppable({
                    scope: "compatible" + attrs.draggable,
                    activeClass: "toDropHere",
                    drop: function(event, ui) {
                        console.warn("New XHR here!!!!!!"), $(this).addClass("uld_assigned"), $(this).droppable("disable"), 
                        ui.draggable.draggable("disable", 1), $(this).css("background-color", "");
                    },
                    over: function(event, ui) {
                        $(this).css("background-color", "pink");
                    },
                    out: function(event, ui) {
                        $(this).css("background-color", "");
                    }
                });
            }, 0);
        }
    };
} ]), angular.module("WeightBalanceApp").directive("hasTipsy", function() {
    "use strict";
    return {
        restrict: "A",
        scope: !1,
        link: function(scope, element, attrs) {
            element.tipsy({
                gravity: "s",
                html: !0
            });
        }
    };
}), angular.module("WeightBalanceApp").directive("numbersOnly", function() {
    "use strict";
    return {
        require: "ngModel",
        link: function(scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.push(function(inputValue) {
                if (void 0 == inputValue) return "";
                var transformedInput = inputValue.replace(/[^0-9]/g, "");
                return transformedInput != inputValue && (modelCtrl.$setViewValue(transformedInput), 
                modelCtrl.$render()), transformedInput;
            });
        }
    };
}), angular.module("WeightBalanceApp").filter("getArrayFilter", function() {
    "use strict";
    return function(input, total, preselected_length) {
        total = "number" == typeof preselected_length ? parseInt(preselected_length) : parseInt(total);
        for (var i = 0; total > i; i++) input.push(i);
        return input;
    };
}), angular.module("WeightBalanceApp").filter("numberFixedLen", function() {
    return function(n, len) {
        var num = parseInt(n, 10);
        if (len = parseInt(len, 10), isNaN(num) || isNaN(len)) return n;
        for (num = "" + num; num.length < len; ) num = "0" + num;
        return num;
    };
}), angular.module("WeightBalanceApp").factory("InboxFactory", [ "$q", "$http", "$location", function($q, $http, $location) {
    "use strict";
    var exports = {}, tmpUnread = [], setUnreadMessages = function(messages) {
        tmpUnread.length = 0, angular.forEach(messages, function(value, key) {
            value.unread && tmpUnread.push(value);
        }), exports.unreadMessages = tmpUnread;
    };
    return exports.messages = {}, exports.unreadMessages = {}, exports.notifications = {}, 
    exports.goToMessage = function(id) {
        angular.isNumber(id) && $location.path("inbox/email/" + id);
    }, exports.deleteMessage = function(id, index) {
        this.messages.splice(index, 1), console.log("mess nr:  ", exports.messages.length);
    }, exports.getMessages = function() {
        var deferred = $q.defer();
        return $http.get("controller/message/mess").success(function(data) {
            exports.messages = data, setUnreadMessages(data), deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        }), deferred.promise;
    }, exports.getFlightMessages = function(flightId) {
        var deferred = $q.defer();
        return $http.get("controller/message/message/" + flightId).success(function(data) {
            exports.messages = data, setUnreadMessages(data), deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        }), deferred.promise;
    }, exports.getNotifications = function() {
        var deferred = $q.defer();
        return $http.get("app/json/notifications.json").success(function(data) {
            exports.notifications = data, deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        }), deferred.promise;
    }, exports.getNrMessages = function() {
        return exports.messages.length;
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("EmailFactory", [ "$q", "$http", "$routeParams", function($q, $http, $routeParams) {
    "use strict";
    var exports = {};
    return exports.messages = {}, exports.reply = function(message) {
        message && alert("Reply content: " + message);
    }, exports.getMessage = function(params) {
        if (params.id) {
            var deferred = $q.defer();
            return $http.get("controller/message/mess1/" + params.id).success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("CdlFactory", [ "$q", "$http", "$routeParams", function($q, $http, $routeParams) {
    "use strict";
    var exports = {};
    return exports.cdlItems = {}, exports.getCdlItems = function() {
        var deferred = $q.defer();
        return $http.get("controller/message/mess").success(function(data) {
            exports.cdlItems = data, deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        }), deferred.promise;
    }, exports.submitReportCdl = function(list, item) {
        console.log(list.length, item);
        var tempObj = {};
        tempObj.type = "demo type item id:" + item, tempObj.content = "demo content", list.length && item && list.push(tempObj);
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("FlightsFactory", [ "$q", "$http", "$routeParams", "$location", "RemoteService", "ModelFactory", "localStorageService", "TENANT", "CONST", function($q, $http, $routeParams, $location, RemoteService, ModelFactory, localStorageService, TENANT, CONST) {
    "use strict";
    var exports = {};
    return exports.flights = {}, exports.changeView = function(view) {
        $location.path(view);
    }, exports.goToFlight = function(segmentId, flightLegId, checkinOpen, flightId) {
        angular.isNumber(segmentId) && angular.isNumber(flightLegId) && checkinOpen && exports.changeView("flights/" + segmentId + "/" + flightLegId + "/" + flightId);
    }, exports.addToMyFlights = function(obj, parent) {
        if (!angular.isUndefined(obj.flightLegId) && angular.isNumber(obj.flightLegId) && !angular.isUndefined(obj.segmentId) && angular.isNumber(obj.segmentId)) {
            var departingTime = obj.departingTime, currentTime = exports.flights.login_date, isNr = angular.isNumber(departingTime) && angular.isNumber(currentTime);
            if (console.log(" Departing Time: ", departingTime, new Date(departingTime)), console.log(" Now: ", currentTime, new Date(currentTime)), 
            !isNr) return alert("This flight was at " + new Date(departingTime) + ", and now is " + new Date(currentTime) + "!"), 
            !1;
            var param = ModelFactory.UserFlightSegmentParam();
            param.userId = TENANT.userId, param.flightSegmentId = obj.segmentId, param.flightLegId = obj.flightLegId;
            var promise = RemoteService.addFlightSegmentToUser(param);
            promise.then(function(data) {
                exports.flights.assigned_flights.push(obj), console.log(" My dashboard / dashboard length: ", exports.flights.assigned_flights.length, exports.flights.assigned_flights), 
                exports.removeFlight(obj, parent);
            }, function(error) {
                alert("Add flight segment failed");
            });
        }
    }, exports.removeFromMyFlights = function(obj, removeFrom) {
        if (!angular.isUndefined(obj)) {
            console.log("deleted itemm: ", obj);
            var param = ModelFactory.UserFlightSegmentParam();
            param.userId = TENANT.userId, param.flightSegmentId = obj.segmentId, param.flightLegId = obj.flightLegId;
            var promise = RemoteService.removeFlightSegmentFromUser(param);
            promise.then(function() {
                exports.removeFlight(obj, removeFrom), exports.getFlights();
            }, function() {
                alert("Remove flight segment failed");
            });
        }
    }, exports.removeFlight = function(obj, removeFrom) {
        if (!angular.isUndefined(obj)) {
            console.log("deleted item before: ", obj, removeFrom);
            for (var index = -1, i = 0; i < removeFrom.length; i++) if (removeFrom[i].segmentId === obj.segmentId) {
                index = i;
                break;
            }
            index >= 0 && removeFrom.splice(index, 1), console.log("deleted item after: ", obj, removeFrom);
        }
    }, exports.getFlights = function(params) {
        var deferred = $q.defer();
        return $http.get("controller/flightSegment/timeLineFlights/" + TENANT.userId).success(function(data) {
            exports.flights = data, console.warn("getting data: ", exports.flights), deferred.resolve(data);
        }).error(function(data) {
            deferred.reject(data);
        }), deferred.promise;
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("FlightFactory", [ "$q", "$http", "$routeParams", "$location", "RemoteService", "ModelFactory", function($q, $http, $routeParams, $location, RemoteService, ModelFactory) {
    "use strict";
    var exports = {};
    return exports.flight = {}, exports.amendedData = {}, exports.fuelData = {}, exports.cargoData = {}, 
    exports.changeView = function(view) {
        $location.path(view);
    }, exports.px2InchRatio = function(px, inch) {
        return !angular.isUndefined(inch) && angular.isNumber(inch) ? parseFloat(px / inch).toFixed(3) : void 0;
    }, exports.getFlight = function(params) {
        if (params.segmentId && params.flightLegId) {
            var deferred = $q.defer();
            return $http.get("controller/flight/summary/" + params.segmentId + "/" + params.flightLegId).success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports.getBaggageCategories = function(flightLegId) {
        var deferred = $q.defer();
        return console.log("send baggage categories request"), $http.get("controller/baggage/categories/" + flightLegId).success(function(data) {
            deferred.resolve(data), console.log("send baggage categories request - SUCCESS");
        }).error(function(data) {
            deferred.reject(data), console.log("send baggage categories request - FAIL");
        }), deferred.promise;
    }, exports.getAmendData = function(fleetCode, flightLegId, aircraftId) {
        if (console.log("amend data factory"), fleetCode && flightLegId && aircraftId) {
            var deferred = $q.defer();
            return $http.get("controller/fleet/aircraft/detail/" + fleetCode + "/" + flightLegId + "/" + aircraftId).success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports.getCargoData = function(flightLegId) {
        if (console.log("cargo data factory"), flightLegId) {
            var deferred = $q.defer();
            return $http.get("controller/deadLoad/manualEntry/" + flightLegId).success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports.getFuelData = function(flightLegId, isStandardFuel) {
        if (console.log("get Fuel data: ", flightLegId, isStandardFuel), flightLegId) {
            var url, deferred = $q.defer();
            return url = isStandardFuel ? "controller/flight/standard/fuel/" + flightLegId : "controller/flight/nonstandard/fuel/" + flightLegId, 
            $http.get(url).success(function(data) {
                deferred.resolve(data);
            }).error(function(data) {
                deferred.reject(data);
            }), deferred.promise;
        }
    }, exports.switchFuelType = function(flightLegId, force) {
        var param = ModelFactory.FuelTypeParam();
        param.flightLegId = flightLegId, param.standard = force;
        var url, promise = RemoteService.switchFuelType(param), deferred = $q.defer();
        return promise.then(function(data) {
            url = data.standard ? "controller/flight/standard/fuel/" + flightLegId : "controller/flight/nonstandard/fuel/" + flightLegId, 
            $http.get(url).success(function(items) {
                items.isStandard = data.standard, deferred.resolve(items);
            }).error(function(items) {
                deferred.reject(items);
            });
        }, function(error) {
            fail(error.msg);
        }), deferred.promise;
    }, exports.submitStandardFuelData = function(data, flightLegId) {
        console.log(data);
        var param = ModelFactory.SubmitStandardParam();
        param.flightLegId = parseInt(flightLegId, 10), param.densityId = parseInt(data.changedDensity, 10) || parseInt(data.densityId, 10), 
        param.totalFuel.weight = data.totalFuel.weight, param.tripFuel.weight = data.tripFuel.weight, 
        param.extraTaxiBurnOff.weight = data.extraTaxiBurnOff ? data.extraTaxiBurnOff.weight : 0;
        var promise = RemoteService.submitStandardFuel(param);
        promise.then(function(data) {
            window.location.reload();
        }, function(error) {
            fail(error.msg);
        });
    }, exports.submitNonStandardFuelData = function(data, flightLegId) {
        console.log(data);
        var param = ModelFactory.SubmitNonStandardParam();
        param.flightLegId = parseInt(flightLegId, 10), param.densityId = parseInt(data.changedDensity, 10) || parseInt(data.densityId, 10);
        for (var i = 0, l = data.fuelTanks.length; l > i; i++) param.fuelTanks[i] = {}, 
        param.fuelTanks[i].tankId = data.fuelTanks[i].tankId, param.fuelTanks[i].weight = data.fuelTanks[i].fuel.weight;
        param.tripFuel.weight = data.tripFuel.weight, param.extraTaxiBurnOff.weight = data.extraTaxiBurnOff ? data.extraTaxiBurnOff.weight : 0;
        var promise = RemoteService.submitNonStandardFuel(param);
        promise.then(function(data) {
            window.location.reload();
        }, function(error) {
            fail(error.msg);
        });
    }, exports.submitAmendData = function(data, flightLegId, flightId) {
        console.log(data);
        var finalZFW, finalTOW, finalLW, param = ModelFactory.SubmitAmendParam();
        param.fleetCode = data.fleetCode, param.aircraftId = data.validateRegistration, 
        param.flightId = parseInt(flightId, 10), param.configurationId = parseInt(data.validateCabinConfiguration, 10), 
        param.pantry.volatileValuesId = parseInt(data.validatePantry, 10), param.pantry.weightAdj = data.validatePantryWeight, 
        param.pantry.type = data.validatePantryType, param.crew.volatileValuesId = parseInt(data.validateCrew, 10), 
        param.crew.weightAdj = data.validateCrewWeight, param.crew.type = data.validateCrewType, 
        param.regulatedValues.flightLegId = parseInt(data.regulatedValues.flightLegId, 10), 
        finalZFW = data.maxValues.maximumZeroFuelWeight == data.model.zfw ? data.regulatedValues.regZeroFuelWeight : data.model.zfw, 
        finalTOW = data.maxValues.maximumTakeOffWeight == data.model.tow ? data.regulatedValues.regTakeOffWeight : data.model.tow, 
        finalLW = data.maxValues.maximumLandingWeight == data.model.ldw ? data.regulatedValues.regLandingWeight : data.model.ldw, 
        param.regulatedValues.regZeroFuelWeight = finalZFW, param.regulatedValues.regTakeOffWeight = finalTOW, 
        param.regulatedValues.regLandingWeight = finalLW;
        var promise = RemoteService.submitAmend(param);
        promise.then(function(data) {
            window.location.reload();
        }, function(error) {
            fail(error.msg);
        });
    }, exports.emptyCargoUnitRows = function(data, obj) {
        console.log("deleted row: ", obj);
        var param = {};
        param.deadLoadId = obj.deadLoadId;
        var promise = RemoteService.removeCargoUnitRows(param, obj.deadLoadId);
        promise.then(function() {
            data.splice(data.indexOf(obj), 1);
        }, function() {
            alert("Remove ULD failed");
        });
    }, exports.emptyCargoBulkRows = function(obj) {
        console.log("deleted row: ", obj);
        var param = {};
        param.deadLoadId = obj.deadLoadId;
        var promise = RemoteService.removeCargoUnitRows(param, obj.deadLoadId);
        promise.then(function(data) {
            obj.canEditRowCargo = !1, obj.unlockSpecialLoad = !1, obj.grossWeight = 0, obj.specialLoadLabel = "", 
            obj.specialLoadParams = [];
        }, function(data) {
            alert("Remove BULK failed");
        });
    }, exports;
} ]), angular.module("WeightBalanceApp").factory("ModelFactory", [ function() {
    "use strict";
    var authRequest = function() {
        this.username = "", this.password = "";
    }, resetRequest = function() {
        this.newPassword = "", this.retypeNewPassword = "", this.token = "", this.tenant = "";
    }, forgotRequest = function() {
        this.username = "";
    }, userTokenParam = function() {
        this.userToken = "", this.tenantCode = "";
    }, userFlightSegmentParam = function() {
        this.userId = "", this.flightSegmentId = "";
    }, fuelTypeParam = function() {
        this.flightLegId = "", this.standard = "";
    }, submitStandardParam = function() {
        this.flightLegId = "", this.densityId = "", this.totalFuel = {}, this.totalFuel.weight = "", 
        this.tripFuel = {}, this.tripFuel.weight = "", this.extraTaxiBurnOff = {}, this.extraTaxiBurnOff.weight = "";
    }, submitNonStandardParam = function() {
        this.flightLegId = "", this.densityId = "", this.tripFuel = {}, this.tripFuel.weight = "", 
        this.fuelTanks = [], this.extraTaxiBurnOff = {}, this.extraTaxiBurnOff.weight = "";
    }, submitAmendParam = function() {
        this.fleetCode = "", this.aircraftId = "", this.flightId = "", this.configurationId = "", 
        this.pantry = {}, this.pantry.volatileValuesId = "", this.pantry.weightAdj = "", 
        this.pantry.type = "", this.crew = {}, this.crew.volatileValuesId = "", this.crew.weightAdj = "", 
        this.crew.type = "", this.regulatedValues = {}, this.regulatedValues.flightLegId = "", 
        this.regulatedValues.regZeroFuelWeight = "", this.regulatedValues.regTakeOffWeight = "", 
        this.regulatedValues.regLandingWeight = "";
    };
    return {
        AuthRequest: function() {
            return new authRequest();
        },
        ResetRequest: function() {
            return new resetRequest();
        },
        ForgotRequest: function() {
            return new forgotRequest();
        },
        UserFlightSegmentParam: function() {
            return new userFlightSegmentParam();
        },
        UserTokenParam: function() {
            return new userTokenParam();
        },
        FuelTypeParam: function() {
            return new fuelTypeParam();
        },
        SubmitStandardParam: function() {
            return new submitStandardParam();
        },
        SubmitNonStandardParam: function() {
            return new submitNonStandardParam();
        },
        SubmitAmendParam: function() {
            return new submitAmendParam();
        }
    };
} ]), angular.module("WeightBalanceApp").service("RemoteService", [ "$q", "$http", "TENANT", function($q, $http, TENANT) {
    "use strict";
    var _baseUrl = "controller", _postRequestOptions = {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        }
    }, _getRequestOptions = {
        method: "GET",
        headers: {
            "Content-Type": "text/plain"
        }
    }, _addTenantCode = function(param) {
        var p = angular.extend(param, {
            tenantCode: TENANT.tenantCode
        });
        return p;
    };
    this.login = function(authenticationRequest) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/authentication/login",
            data: authenticationRequest
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.resetPassword = function(authenticationRequest) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/user/password/forgot/reset",
            data: authenticationRequest
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.forgotPassword = function(authenticationRequest) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/user/password/forgot",
            data: authenticationRequest
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.logout = function(userTokenParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/authentication/logout",
            data: _addTenantCode(userTokenParam)
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.switchFuelType = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/flight/fuel/switch/",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.submitStandardFuel = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/flight/standard/fuel/",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.submitNonStandardFuel = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/flight/nonstandard/fuel/",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.submitAmend = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/fleet/aircraft/data/",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.updateBasicWeightData = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/fleet/aircraft/dryOperatingWeight/",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.addFlightSegmentToUser = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/flightSegment/user/add",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.removeFlightSegmentFromUser = function(userFlightSegmentParam) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/flightSegment/user/remove",
            data: userFlightSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.submitCargoBulk = function(submitBulkCargoParam, flightLegId, flightSegId, destination) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/deadLoad//manualEntryBulk/SaveOrUpdate/" + flightLegId + "/" + flightSegId + "/" + destination,
            data: submitBulkCargoParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.submitCargoUnit = function(submitUnitCargoParam, flightLegId, flightSegId) {
        var req = angular.extend({}, _postRequestOptions, {
            url: _baseUrl + "/deadLoad/manualEntryUld/SaveOrUpdate/" + flightLegId + "/" + flightSegId,
            data: submitUnitCargoParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    }, this.removeCargoUnitRows = function(uldSegmentParam, deadLoadId) {
        var req = angular.extend({}, _getRequestOptions, {
            url: _baseUrl + "/deadLoad/manualEntry/remove/" + deadLoadId,
            data: uldSegmentParam
        }), deferred = $q.defer();
        return $http(req).success(function(data, status, headers, config) {
            deferred.resolve(data);
        }).error(function(data, status, headers, config) {
            deferred.reject({
                msg: data.error
            });
        }), deferred.promise;
    };
} ]), angular.module("WeightBalanceApp").value("TENANT", {
    tenantCode: "",
    tenantName: "",
    userFullName: "",
    username: "",
    logoUrl: ""
}).value("CONST", {
    LS_TENANT: "LS_TENANT"
}), angular.module("WeightBalanceApp").service("AuthHelper", [ "TENANT", "CONST", "RemoteService", "localStorageService", "ModelFactory", function(TENANT, CONST, RemoteService, localStorageService, ModelFactory) {
    "use strict";
    var tenantData = null, setTenantData = function(tenant) {
        tenantData = tenant, TENANT.tenantCode = tenant.tenantCode, TENANT.tenantName = tenant.tenantName, 
        TENANT.userId = tenant.userId, TENANT.userFullName = tenant.userFullName, TENANT.username = tenant.username, 
        TENANT.logoUrl = tenant.logoUrl, TENANT.authToken = tenant.authToken, localStorageService.set(CONST.LS_TENANT, tenant), 
        localStorageService.cookie.set("tenantCode", tenant.tenantCode), localStorageService.cookie.set("authToken", tenant.authToken);
    }, clearTenantData = function() {
        tenantData = null, TENANT.tenantCode = "", TENANT.tenantName = "", TENANT.userId = "", 
        TENANT.userFullName = "", TENANT.username = "", TENANT.logoUrl = "", TENANT.authToken = "", 
        localStorageService.remove(CONST.LS_TENANT), localStorageService.cookie.remove("tenantCode"), 
        localStorageService.cookie.remove("authToken");
    };
    this.doLogin = function(userName, password, success, fail) {
        var param = ModelFactory.AuthRequest();
        param.username = userName, param.password = password;
        var promise = RemoteService.login(param);
        promise.then(function(loginData) {
            setTenantData(loginData), success(loginData);
        }, function(error) {
            fail(error.msg);
        });
    }, this.doResetPass = function(newPassword, retypeNewPassword, token, tenant, success, fail) {
        var param = ModelFactory.ResetRequest();
        param.newPassword = newPassword, param.retypeNewPassword = retypeNewPassword, param.token = token || "", 
        param.tenant = tenant || "";
        var promise = RemoteService.resetPassword(param);
        promise.then(function(data) {
            success(data);
        }, function(error) {
            fail(error.msg);
        });
    }, this.doForgotUser = function(userName, success, fail) {
        var param = ModelFactory.ForgotRequest();
        param.username = userName;
        var promise = RemoteService.forgotPassword(param);
        promise.then(function(data) {
            success(data);
        }, function(error) {
            fail(error.msg);
        });
    }, this.doLogOut = function(success, fail) {
        var param = ModelFactory.UserTokenParam();
        param.userToken = TENANT.authToken;
        var promise = RemoteService.logout(param);
        promise.then(function(data) {}, function(error) {})["finally"](function() {
            clearTenantData(), success();
        });
    }, this.isLoggedIn = function() {
        return tenantData ? !0 : !1;
    }, function() {
        var tmp = localStorageService.get(CONST.LS_TENANT);
        tmp && setTenantData(tmp);
    }();
} ]);
//# sourceMappingURL=global.min.map